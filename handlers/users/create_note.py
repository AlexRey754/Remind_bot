from loader import dp

from aiogram import types
from aiogram.dispatcher import FSMContext

from states import Request_reg
import keyboards
from utils.db_api import db



@dp.message_handler(state=Request_reg.header)
async def set_header(message: types.Message, state: FSMContext):
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞',reply_markup=keyboards.default.menu)
    else:
        text = message.text
        await state.update_data(header=text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏',reply_markup=keyboards.default.cancel)
        await Request_reg.text.set()


@dp.message_handler(state=Request_reg.text)
async def set_text(message: types.Message, state: FSMContext):
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞',reply_markup=keyboards.default.menu)
    else:
        text = message.text
        await state.update_data(text=text)
        await message.answer('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É?',reply_markup=keyboards.default.time_or_remind)
        await Request_reg.time_or_remind.set()

@dp.message_handler(state=Request_reg.time_or_remind)
async def set_text(message: types.Message, state: FSMContext):
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞',reply_markup=keyboards.default.menu)

    elif message.text == '‚è∞–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>##:##</b>',reply_markup=keyboards.default.cancel)
        await Request_reg.time.set()

    elif message.text == 'üóí–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É':
        await state.update_data(time='–ó–∞–º–µ—Ç–∫–∞')
        await Request_reg.confirm.set()
        await message.answer('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?',reply_markup=keyboards.default.save)


@dp.message_handler(state=Request_reg.time)
async def set_text(message: types.Message, state: FSMContext):
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞',reply_markup=keyboards.default.menu)
    else:
        user_time = message.text
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É—Ä–∞–∫–∞
        try:
            if ':' in user_time:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                time = user_time.split(':')
                if 0<=int(time[0])<=23 and 0<=int(time[1])<=59:
                    await state.update_data(time=user_time)
                    await message.answer('–ñ–µ–ª–∞–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?',reply_markup=keyboards.default.save)
                    await Request_reg.confirm.set()
                else: raise
            else: raise
        except:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>##:##</b>',reply_markup=keyboards.default.cancel)


@dp.message_handler(state=Request_reg.confirm)
async def save_note(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ–î–∞':
        data = await state.get_data()
        header = data.get('header')
        text = data.get('text')
        time = data.get('time')
        uid = message.from_user.id
        if time == '–ó–∞–º–µ—Ç–∫–∞':
            db.add_text(uid,header,text)
        else:
            db.add_text(uid,header,text,time,is_note=False)
        await state.finish()
        await message.answer('–°–æ—Ö—Ä–∞–Ω–∏–ª',reply_markup=keyboards.default.menu)

    elif message.text == '‚ùå–ù–µ—Ç':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–∞',reply_markup=keyboards.default.menu)

        
